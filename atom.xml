<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[怪兽说]]></title>
  <link href="http://yingl.github.io/atom.xml" rel="self"/>
  <link href="http://yingl.github.io/"/>
  <updated>2014-08-13T10:18:49+08:00</updated>
  <id>http://yingl.github.io/</id>
  <author>
    <name><![CDATA[窥基／无柳无酒／黑灯瞎火]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[大话移动APP测试书评]]></title>
    <link href="http://yingl.github.io/blog/2014/08/13/da-hua-yi-dong-app-ce-shi-shu-ping/"/>
    <updated>2014-08-13T10:10:04+08:00</updated>
    <id>http://yingl.github.io/blog/2014/08/13/da-hua-yi-dong-app-ce-shi-shu-ping</id>
    <content type="html"><![CDATA[<p><a href="http://book.douban.com/subject/25923638/">豆瓣链接</a></p>

<p>Monkey可以称得上是中国移动互联网测试的先驱人物，今日做为同事为他的新书推荐，倍感荣幸。正如书名包含“大话”二字，所以你不要期望它是一本严肃的、学院派的技术书籍（据说2会是一本技术著作）。但是你如果是一个想进入移动测试领域的新人，又或者是一个想了解移动产品测试的产品经理、开发者、投资人，那么这本书是一本再好不过的教材。从针对专业技术人员的工具、框架、性能和自动化测试，到针对产品的用户体验测试，基本涵盖了移动产品测试的方方面面。另外作者还分享了大量亲身经历的案例，使得本书更具有可操作性，看完之后可以立刻投入到实际工作中去。除了严肃的技术内容，还有幽默风趣的吐槽和心灵鸡汤式的职业生涯指点。不管你式测试老兵还是行业新人，读完相信都能让你会心一笑，豁然开朗。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bugs: 小缓存大问题]]></title>
    <link href="http://yingl.github.io/blog/2014/08/12/bug-cache/"/>
    <updated>2014-08-12T20:40:05+08:00</updated>
    <id>http://yingl.github.io/blog/2014/08/12/bug-cache</id>
    <content type="html"><![CDATA[<p>具体业务细节不方便公开，但是这个问题警告我们在使用缓存的时候必须非常重视一致性问题。</p>

<p>首先来研究一下我们的缓存设计，我们选择了双机房双集群模式。也就是理论上说，每个机房都有一个独立的缓存集群，每次根据响应速度随机挑选一个比较快的集群访问，如果读取到数据，那么直接返回，如果没有读取到，那么从检查数据库并更新缓存记录。如果数据库里没有记录，那么先调用一个失效操作，然后写入缓存。整个系统看着没什么问题，但是天有不测风云～～～</p>

<!--more-->


<p>现在看看我们的系统问题出在哪里，大胆假设，小心求证后，我发现我们的数据只写了缓存，并没有写到数据库记录。现在来还原案发现场：</p>

<ol>
<li>集群A和B都没有记录。</li>
<li>集群A选中，没有记录，写入记录。</li>
<li>集群A选中，读取记录成功。</li>
<li>集群A选中，&hellip;&hellip;</li>
<li>集群B选中，写入A中的记录读取不到（因为2个集群是相互独立的，而且我们只写缓存，所以没有从数据库读取更新缓存这一步），写入之前调用了一次失效操作，导致集群A的记录也失效，这时B集群记录写入。</li>
<li>集群B选中，读取记录成功。</li>
<li>集群B选中，&hellip;&hellip;</li>
<li>集群A选中，第5步的情况又出现了。</li>
</ol>


<p>每次状况5和8出现的时候，因为该读的缓存记录我们没有读取到，所以做了一个特定的操作。然后因为我们应用的访问量特别大，这个操作出现的次数也忒多了些，然后就悲剧了。</p>

<p>最后怎么解决的？代码一行没改，缓存配置为双机房单集群，只要记录写入了缓存就不存在两个机房不一致的问题。所以使用缓存，特别是分布式缓存，有没有持久化记录对于保证记录一致性的影响还是很重要的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式 结构型：适配器]]></title>
    <link href="http://yingl.github.io/blog/2014/08/12/dp-structural-adapter/"/>
    <updated>2014-08-12T20:39:40+08:00</updated>
    <id>http://yingl.github.io/blog/2014/08/12/dp-structural-adapter</id>
    <content type="html"><![CDATA[<h3>适配器 Adapter</h3>

<p><strong>定义</strong></p>

<p><a href="http://zh.wikipedia.org/wiki/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F">Wiki链接</a>。将一个类的接口转接成用户所期待的。一个适配使得因接口不兼容而不能在一起工作的类工作在一起，做法是将类别自己的接口包裹在一个已存在的类中。</p>

<!--more-->


<p>这个简单来说就像Mac接显示器需要一个额外的转接头一样，这个转接头扮演的就是适配器的角色。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Monitor</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">monitor_display</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Monitor display.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Adapter</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">display</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_monitor</span><span class="p">.</span><span class="n">monitor_display</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>  <span class="n">Monitor</span> <span class="n">_monitor</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Mac</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">display</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_adapter</span><span class="p">.</span><span class="n">display</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>  <span class="n">Adapter</span> <span class="n">_adapter</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Mac</span> <span class="n">mac</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mac</span><span class="p">.</span><span class="n">display</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[James Bach的Rapid Test培训总结]]></title>
    <link href="http://yingl.github.io/blog/2014/07/31/james-bach-rapid-test/"/>
    <updated>2014-07-31T20:41:01+08:00</updated>
    <id>http://yingl.github.io/blog/2014/07/31/james-bach-rapid-test</id>
    <content type="html"><![CDATA[<p>首先感谢阿里巴巴邀请James大神在北京办公室组织了Rapid Test的培训。本来报名的目的只是想和兄弟部门的同事找机会一起交流交流，对测试本身并没有抱太大的期望。结果课程开始之后，只能说不服不行。另外，哥活生生的被大神当作了教学道具&hellip;</p>

<p>虽然James大神脱离项目一线专注培训很多年了，而且也没有互联网项目经验，但是一上来就抓住了问题的本质，项目需求不清楚，进度紧张，资源有限，这都是当年项目情况活生生的写照啊！所谓的Rapid Test就是针对这些问题的。为什么这里不说敏捷Agile？因为这里只谈测试，而且谈的是普遍真理，不管你用Agile还是瀑布流，测试都必须解决的一些共性问题。</p>

<!--more-->


<p>培训过程就不具体描述了，这里就谈几点总结：</p>

<ol>
<li>如何挖掘需求。在阿里测试人员经常听到开发人员说：这个功能做好了，你测一下，明天就发了。呃&hellip;好像这个到底是个什么样的功能都没搞清楚。所以对于测试人员要先了解这个系统，它的功能和设计目标。在教学中举了一个真实的例子，系统看着很简单，输入->判断->输出。一开始觉得这个系统简单，但是在得知是针对航天工程设计的系统时，实时性和稳定性就成为了重要的测试需求。在了解了输入系统的复杂程度之后，测试的重点也立刻明确了。所以对于测试人员，一边要自己摸索，同时也要和团队的其它成员密切沟通，获取需要的各种信息帮助决策。</li>
<li>关于测试用例。James基本上否定了测试用例的价值，这点和我们团队内部正在摸索的实践类似。从项目实践的角度来说，光凭借测试用例，我们无法1）评估测试的有效性；2）保持测试用例和实际情况同步（谁不服自己上Kelude看）；3）从测试用例无法了解整个系统（测试评审基本是在过流水）。大神的观点是基于场景做测试，你可以不写测试用例，但是不代表你不需要做你的家庭作业。取代测试用例的是如下的报告：1）测试场景；2）每个场景需要覆盖的功能点；3）对于每个功能点如何测试；4）场景设计的理由；5）重点测试模块的选择等。总儿言之，你必须让项目组成员相信你的测试是完整的，有足够覆盖的，能保证产品质量的。</li>
<li>探索性测试不是无目的的。探索意味着自由，自由意味着责任。因为你能负责，所以才给你一定的自由。你必须通过试探，分析，验证这个流程去深入了解产品，之后再去系统的分析，有针对性的设计测试，这样才是真正的探索性测试。探索不是漫无目的的随机布朗运动，而是要通过探索建立对整个产品的了解。</li>
<li>为什么课程叫Rapid而不是Agile敏捷？因为Rapid Test讲的是普遍真理，不管你用什么开发模式，敏捷或者传统的瀑布流都能解决问题。其实说到底，就是在人手有限，时间有限的情况下找到一个最好的平衡点，既能按时交付，又能保证质量。</li>
<li>测试人员的定位是守门员，是守住产品质量底线的人。这个观点不是很赞同，毕竟当代足球守门员还担负有后场防守组织的责任。个人认为当代软件测试还承担有带领团队保证软件质量以及不断改进质量的责任。</li>
<li>测试的第一要素是人，工具只是辅助。当人们在谈自动化测试的时候，有人要求过开发自动化编程吗？但是事实上，自动化编程某种程度上确实在发生，比如编译器的工作。对于自动化，我们的衡量标准是生产效率的提高和投入产出比。这个是值得我们在日常工作中借鉴的，有时候比起高大上的全自动化测试脚本，手工测试辅助工具更能提高效率，而且维护成本更低，投入产出比更高。</li>
</ol>


<p>课程只有短短两天，要是指望培训后能力有个突飞猛进那是没可能的。这个课程让你回到测试的原点，解答了为什么要做软件测试，如何做软件测试，如何像一个测试工程师一样思考问题，如何去发现问题。把这些原则与你工作实践想结合，才能真正的提高软件产品质量。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015阿里校招內推]]></title>
    <link href="http://yingl.github.io/blog/2014/07/14/2015a-li-xiao-zhao-nei-tui/"/>
    <updated>2014-07-14T13:50:58+08:00</updated>
    <id>http://yingl.github.io/blog/2014/07/14/2015a-li-xiao-zhao-nei-tui</id>
    <content type="html"><![CDATA[<p>阿里巴巴2015校招內推已经开始了，收到简历的同学我已录入系统，名单如下，大家可以自己对一下。如果有漏掉的，请直接在微博上@我。如果内部推荐电面不通过的话，抱着不落下任一个优秀同学的心态，针对于内部推荐面试不通过的同学，我们还会给予正常校招的笔试机会，笔试通过依然可以参加现场的面试哈。另外，关于內推后的流程，安排如下：</p>

<ol>
<li>即日起至8月1日前完成推荐的简历：简历筛选通过者->安排电话面试</li>
<li>8月1日至8月15日完成推荐的简历：笔试通过者->安排进校面试</li>
<li>8月15日之后完成推荐的简历：我们将在有补招需求时处理</li>
</ol>


<!--more-->


<h4>同学名单</h4>

<p>曹昱：大连理工大学／本科<br/>
陈峰：东南大学／硕士<br/>
陈琼：湖南大学／硕士<br/>
丁道贤：天津大学／硕士<br/>
丁富刚：中南民族大学／本科<br/>
郭婉：西北工业大学／硕士<br/>
李志欣：西北工业大学／硕士<br/>
黄帅：中国地质大学／本科<br/>
刘德强：南阳理工学院／本科<br/>
张友谊：南阳理工学院／本科<br/>
王伟：南京邮电大学／硕士<br/>
王玉萍：南京理工大学／硕士<br/>
吴康伟：山东科技大学／本科<br/>
杨沛超：北京航空航天大学／硕士<br/>
张睿阳：浙江大学／硕士<br/>
徐勤劼：浙江工业大学<br/>
柯姣：宁波大学／硕士<br/>
祝军：宁波大学／硕士<br/>
李木军：宁波大学／硕士<br/>
曹茵茵：北京理工大学／硕士<br/>
李贺：中国科技大学／硕士<br/>
王磊：东华大学／硕士<br/>
王梦丝：西安电子科技大学／硕士<br/>
刘宝：大连理工大学／硕士<br/>
王秀林：大连理工大学／硕士<br/>
姚淑慧：四川大学／本科<br/>
冯博炜：广东工业大学／硕士<br/>
胡为：湖南大学／硕士<br/>
刘斌：湖南大学／硕士<br/>
李中坤：湖南大学／本科<br/>
黄晋：中山大学／本科<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式 结构型：外观]]></title>
    <link href="http://yingl.github.io/blog/2014/07/03/dp-structural-facade/"/>
    <updated>2014-07-03T21:22:17+08:00</updated>
    <id>http://yingl.github.io/blog/2014/07/03/dp-structural-facade</id>
    <content type="html"><![CDATA[<h3>外观 Facade</h3>

<p><strong>定义</strong></p>

<p><a href="http://zh.wikipedia.org/zh-cn/%E5%A4%96%E8%A7%80%E6%A8%A1%E5%BC%8F">Wiki链接</a>。它为子系统中的一组接口提供一个统一的高层接口，使得子系统更容易使用。</p>

<!--more-->


<p>这个模式估计是所有设计模式里最简单的了。我们以计算机为例，一个开机动作涉及到CPU启动，硬盘读取，内存装载等一系列动作，但是对于用户来说，只要按一下电源键就可以了。我们可以把开机抽象成计算机对象的一个方法，为了完成一次开机，它完成了所有涉及CPU、内存和硬盘的相关操作。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CPU</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">freeze</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;CPU freeze&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">jump</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;CPU jump&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">execute</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;CPU execute&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Memory</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">load</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Memory load&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HardDisk</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">read</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;HardDisk read&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Computer</span> <span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">CPU</span> <span class="n">cpu</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Memory</span> <span class="n">memory</span><span class="p">;</span>
</span><span class='line'>  <span class="n">HardDisk</span> <span class="n">hard_disk</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">power_on</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cpu</span><span class="p">.</span><span class="n">freeze</span><span class="p">();</span>
</span><span class='line'>    <span class="n">hard_disk</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
</span><span class='line'>    <span class="n">memory</span><span class="p">.</span><span class="n">load</span><span class="p">();</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Computer power on&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Computer</span> <span class="n">computer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">computer</span><span class="p">.</span><span class="n">power_on</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式 创建型：单例]]></title>
    <link href="http://yingl.github.io/blog/2014/06/10/dp-creational-singleton/"/>
    <updated>2014-06-10T21:10:19+08:00</updated>
    <id>http://yingl.github.io/blog/2014/06/10/dp-creational-singleton</id>
    <content type="html"><![CDATA[<h3>单例 Singleton</h3>

<p><strong>定义</strong></p>

<p><a href="http://zh.wikipedia.org/wiki/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">Wiki链接</a>。单例对象的类必须保证只有一个实例存在。</p>

<!--more-->


<p>为什么需要单例，其实理由很简单，为避免重复建设。比如我们前面讲到的工厂模式，相同的工厂只要有一个就够了，多了就浪费了，管理起来也不方便。下面具体讲一下单例的实现。</p>

<p>实现一（一般面试的标准答案）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">lock</span> <span class="n">g_lock</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Singeleton</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">Obj</span><span class="o">*</span> <span class="n">getInstance</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">_instance</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 加锁确保线程安全</span>
</span><span class='line'>        <span class="n">lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">g_lock</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// 这部判断很重要，很有可能其它线程刚调用完getInstance，_instance已被创建。</span>
</span><span class='line'>        <span class="c1">// 如果这里不判断是否NULL，很可能又创建一个新的Obj对象。</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">_instance</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">_instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Obj</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">g_lock</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">Obj</span> <span class="o">*</span><span class="n">_instance</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Obj</span><span class="o">*</span> <span class="n">Singeleton</span><span class="o">::</span><span class="n">_instance</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现二（利用静态变量简化多线程的情况）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Singleton</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">T</span><span class="o">*</span> <span class="n">getInstance</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">static</span> <span class="n">T</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="o">&amp;</span><span class="n">_instance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bugs: 价格转换粗大事了]]></title>
    <link href="http://yingl.github.io/blog/2014/05/20/bug-price-convert/"/>
    <updated>2014-05-20T15:12:48+08:00</updated>
    <id>http://yingl.github.io/blog/2014/05/20/bug-price-convert</id>
    <content type="html"><![CDATA[<p>今天中午刚吃完饭正在一狼假寐，突然电话铃响起！什么？居然有价格为0的商品？立刻从睡梦中惊醒开始排查。啥都不说了，先把肇事代码拿出来：</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getPriceStr</span><span class="p">(</span><span class="nx">priceLong</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">priceLong</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">priceLong</span> <span class="o">/</span> <span class="mi">100</span><span class="p">)).</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很明显，问题出在round上，丫返回的是整数啊！后台返回的价格单位是分，前台转化成元，想法没错，但是但是&hellip;好吧，测试也有很大责任，只看页面展现，把这个细节漏掉了。从这个例子可以看出，单元测试非常非常重要，如果有单元测试的话，开发阶段就可以把这个问题修复了。还好这次没撞上大活动，在灰度阶段被兄弟部门发现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法班学生来信及回复－鸡汤文！]]></title>
    <link href="http://yingl.github.io/blog/2014/05/19/letter-from-student/"/>
    <updated>2014-05-19T21:09:26+08:00</updated>
    <id>http://yingl.github.io/blog/2014/05/19/letter-from-student</id>
    <content type="html"><![CDATA[<p>在July，Ben，高博老师等一干同志的努力下，上海算法班终于开课了。第一次课比较成功，学生们求知若渴，积极互动。除了算法方面的入门讲座外，也分享了一些职业发展相关的话题。课后，有个同学给我发了消息，经与他确认后，我把这篇文章和我的回复一起贴出来分享一下。</p>

<!--more-->


<p>黑灯老师好，感谢你今天的课程，充满真诚，全是干货。不知道你们出于什么目的办这个课程，因为看起来这些钱对你们来说不算什么。是为了帮助朋友，还是想把培训做大，或者想带出几个不错的学员。从我的角度来讲，这可能会是我花的最值的800块钱。
我先介绍一下自己。我叫XYZ，今年26岁。07年参加高考考入大连理工大学，由于是辽宁人，省内学校的分数线相对低一些，超了录取分数线40多分，去了学校内分数最高的电子信息工程专业。大学期间基本没有把心细放在学习上，GPA只有3.0，后来大三的时候突击英语，申请到了香港大学的授课制研究生。这种研究生基本属于那边吸金的项目，上上课考考试也就毕业了。
自己之前在找工作上也不是特别走心，毕业了以后还gap了将近一年。以前总以为自己有些基本素质，即使不会到企业里再学习。后来发现，企业不是培训机构，找我们来是让我们干活的，让我们创造价值的。父母都在军队工作，也算有些级别，但是对公司上的事就不是很了解，家里不太用我担心，也能帮我找到类似养老国企的工作，不过那些不太是我想要的。自己想真正学点东西，虽然现在水平很差，总归是have to start from somewhere.</p>

<p>上面说了这么多，是想老师对我有个了解，下面问几个问题。
第一、现在感觉处于一种信息很不对等的状态，不知道企业需要什么能力，还有例如这个工作具体每天做什么事情，是不是我想要的。欢迎老师分享一些你工作的经历，对职位发展、行业发展的理解。</p>

<p>第二、就是硬实力这一块。针对面试是一种准备，另外就是真正把我的实力提升起来，肚子里有货。怎么把技术学习好，也都知道多写多看多思考，可是具体做起来就没了方向。比如算法重要还是其他的哪个部分重要，如果算法重要，有哪些具体的提升方法，比如想看MIT算法课程，听你们的课程，刷leetcode这种。看了我自己的介绍，老师估计也知道我是比较懒、比较贪玩的那种，期待找到什么捷径。现在是不想走弯路的多一些，如果有用，我会下决心做好。
还有职业规划这一块。</p>

<p>我是想做一些类似业务、技术、管理、和客户打交道这种交叉综合似的工作，企业可能想找一些外企，国内一些企业，比如百度它的一些做法我不是很认同。不过本身对外企不是很了解，这大多可能是一种叶公好龙的状态。欢迎老师分享见解。</p>

<p>期待进一步跟你们的交流。</p>

<p>&mdash;&mdash;&mdash; 分割线下面是我的回答 &mdash;&mdash;&mdash;</p>

<p>首先你的学历背景已经胜过大多数同龄人了，家庭背景又足以让你没有后顾之忧，所以趁着年轻，赶紧努力去追逐梦想！下面逐条回答你的问题，希望能对你有所帮助。</p>

<ol>
<li><p>关于工作经历什么的建议你上Linkedin，可以查到很多牛人的经历。我的经历没什么特别的，先在国营工厂，然后去了外企，最近又来到了民企。对于职业发展，我有一句忠告：大多数人的工作都是乏味无趣的。如果想追求有挑战性的工作，第一件事诚实的问一下自己能力够不够？所以不要轻视你手里乏味的工作，有个关于年轻人贴发票的段子（不清楚的话可以Google）老得不能再老，但是对现实生活有着切实得指导意义。如果你觉得工作枯燥，乏味，那么运用你的智慧去改善它，让它变得更有趣，更有挑战力。另外对于刚参加工作的年轻人来说，不要指望有什么伯乐，在你证明你的能力之前没人把你当回事。当你一迈上工作岗位后，忘记你的学校和学历，在点滴工作中证明自己才是最好的办法。古人说得好，不积珪步无以成千里，很多业内大牛也都是从很多很初级的工作做起。比如上海微软不少人转到美国去工作，他们在加入微软之前已经是业务骨干，不少在网上也小有名气，但是来了微软后有的做的是很基础的修复一些老产品bug的工作，但正是慢慢的在这些项目上证明能力和建立信任，才逐步转到核心产品岗位上。</p></li>
<li><p>关于企业具体想要什么能力，最简单的方法是看企业招聘广告上的JD（工作描述）。或者是通过社交网络结识相关企业的员工了解详细情况。但是某些能力是通用的：了解计算机体系结构，基本的数据结构和算法，至少熟悉一门编程语言，深入了解1到2样主流技术。</p></li>
<li><p>关于真正的实力，只能说你们很幸运的生在了这个年代。互联网行业与传统行业不同，哪怕你一天班都没上过，也能积累很多经验并证明。想进入大公司，算法只是一方面，很多人不懂算法也混得很好，因为有真本事。但是真本事是需要花时间积累的，比如github上有很多开源项目，可以先试着去读他们的代码，在自己机器上调试，理解了别人的设计后再自己试着去改。说实话，捷径真的没有。我有个朋友，本科毕业加入阿里，4年就升到技术专家，无它，刻苦而已。本科的时候为ACM通宵刷题，工作后为解决技术难题加班到凌晨是经常的。只有热爱并为之真正付出才会有回报。最后给出一个勉强算是捷径的方法：好学校毕业，或者在微博上和很多真伪大牛打得火热，自己的努力达到能和这些人交流的门槛，然后就混圈子吧。</p></li>
<li><p>关于你的职业理想，一开始不会有这样的工作等着你。至少在技术或业务某一个地方证明你的能力，上级才会扩大你的职责范围。今天下午开年会，分管的高级副总裁讲话，他在转向管理之前做了7年的技术工作。我之前有个同事是微软中国的首席技术步道师（从工作内容上来看接近你的要求），但是他在加入微软之前就已经国内出色的技术专家，之后在技术支持和项目管理岗位上又做了10年，没有这点积累，上级和客户怎么会信任你？无论如何，IT行业的萝卜干饭不用像传统行业吃那么久。当年我在国企第一年还是助理工程师，第二年也只是有资格考工程师职称，而且离开那个行业后，你积累的知识毫无用处。另外不管外企民企，干活最重要。很多外企外表光鲜，但本质就是一个大号国企。加入一个公司之前首先问你自己想从里面得到什么。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode终于刷完了]]></title>
    <link href="http://yingl.github.io/blog/2014/05/13/leetcode/"/>
    <updated>2014-05-13T21:33:45+08:00</updated>
    <id>http://yingl.github.io/blog/2014/05/13/leetcode</id>
    <content type="html"><![CDATA[<p>当年准备面试FLAG时开工的，后来断断续续做了一点，这次终于痛下决心刷完整理上传到github上了。参考链接：<a href="https://github.com/yingl/leetcode_in_cpp">https://github.com/yingl/leetcode_in_cpp</a></p>

<!--more-->


<p>总的来说，这些题目比起专业的ACM还是比较简单的，数据结构不外乎数组，链表和二叉树；算法不外乎二分，递归，回溯，深度／广度优先遍历，空间换时间。到9月份校园招聘季节就开始了，如果对自己算法数据结构不自信的话，那就把这当作一个福利吧！</p>

<p>关于面试的时候为什么要考白板编程，好好参考一下这篇文章：<a href="http://blog.jobbole.com/65625/">白板与编程面试：为什么不在电脑上编程更有帮助</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年阿里巴巴实习生面试武汉站总结]]></title>
    <link href="http://yingl.github.io/blog/2014/04/28/wuhan-interview/"/>
    <updated>2014-04-28T18:59:08+08:00</updated>
    <id>http://yingl.github.io/blog/2014/04/28/wuhan-interview</id>
    <content type="html"><![CDATA[<p>4月24、25两天奔赴武汉参加了2014年阿里巴巴实习生面试，感触不少，写下来和大家分享一下，希望今年找工作的学生能借鉴一二。</p>

<!--more-->


<h3>简历</h3>

<p>最怕看到那种花里胡哨，制作特精美的简历。看了大半天我知道你喜欢摄影，爱好文艺，心地善良，但到底你学过那些课程，做过哪些项目，擅长哪些技术，e&hellip; 看到第三页才发现非常精简的两句话带过了。好的简历只需要一页纸就可以了，最多两页。字体选用标准的宋体或楷体，千万不要打印卡通图案，某同学的大黄鸭给我印象深刻，直到我飞机回上海还惦记着！内容直奔主题，姓名、学校、专业、成绩、擅长技术再加上项目经验。什么个人爱好，自我评价能省就省，就算加也不要超过一行，基本不大有人会关心这些东西，因为面试和你聊的时候都会挖掘出来。</p>

<h3>自我介绍</h3>

<p>虽然看过了简历，但还是想听下自我介绍，主要是想考核一下表达能力。有些同学上来很生猛，姓名学校一报，第三句话就是“简历上都有”。或者就是滔滔不绝，学生会、演讲比赛这些事全说上。好的自我介绍控制在两三分钟左右，重点放在项目和擅长技术上，让面试官明白你在项目里做了什么，克服什么困难，取得什么成果。最好面试前预热一下，好的表达可以留下一个好印象。</p>

<h3>成绩／专业</h3>

<p>大家好好读书吧，我看到最差的也是985学校排名前30%，大多数都是排前10%。不要相信高分低能的说法，真实情况是高分高能的概率更大一点，你是特例的概率比较低。至于非计算机专业的同学也不用担心，只要通过笔试，大家的机会是均等的。计算机这个东西基本靠自学，多看书，多实践，水平自然上去了。</p>

<h3>基础知识</h3>

<p>这个怎么强调都不过分。等工作后发现这些东西离你其实并不遥远，每天都会接触。常用的数据结构、算法、并发资源竞争等，每天的工作都会用到。另外如果是做Java的，GC、反射这些东西得能讲清楚。做C++，this指针，虚函数这些知识要清楚。</p>

<h3>开发 vs 测试</h3>

<p>很多同学有个误区，认为是做不了开发才来做测试，实际上我这里的面试标准是你得先达到开发的要求，我再来和你谈测试的问题（我同时还面C++背景的开发同学）。因为好的测试人员必须是一个好的开发人员，不然他怎么领会代码背后的真实意图？怎么看出设计的问题？怎么分析导致bug的原因？怎么通过改进代码来避免bug而不是被动的等待测试执行时发现bug？我在面试的时候给开发／测试的同学是同一套问题，编程数据结构只用到了数组，最后代码不超过20行，但很多同学还是不能很好的完成（想想哪些遇到链表、二叉树的同学怎么办？）。</p>

<h3>项目经验</h3>

<p>“我负责整个项目的组织协调工作”。这个，我只能说我们这次不招PM。不过就算负责组织协调工作，要是你能1234有条有理讲清楚的话，还是会想办法让你面试过的。还有很多同学的问题是做了什么讲不清楚，或者没有条理。有一个做云存储的同学是个很正面的例子，取得什么成果，用了什么技术，解决了什么困难条理清晰。正好遇到我以前也是做类似产品，问了一些以前遇到的难题，虽然回答不完全正确，但显然是真刀真枪操练过的，对自己方案的弱点一清二楚。所以同学们在平时做项目的时候多思考，多总结。</p>

<p>另外，面试的时候打扮得精神一点会有额外加分，大部分人都是外貌协会的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bugs: 小心Macro]]></title>
    <link href="http://yingl.github.io/blog/2014/04/16/bug-macro/"/>
    <updated>2014-04-16T20:24:59+08:00</updated>
    <id>http://yingl.github.io/blog/2014/04/16/bug-macro</id>
    <content type="html"><![CDATA[<p>以前在微软做数据库连接组件测试时曾遇到这么一个问题，为了提高测试的真实性，所有测试用例在编译时取消了_DEBUG/DEBUG的定义，结果在执行测试用例的时候出现一个从未见过的错误，经调试发现if/else工作不正常，在if已经判断为false之后还是继续执行，没有跳转。经过对代码反复排查，最终发现是宏的不恰当使用导致了这个问题。</p>

<!--more-->


<p>先看以下这段简化过的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#ifdef _DEBUG</span>
</span><span class='line'>  <span class="err">#</span><span class="n">define</span> <span class="n">TRACE</span> <span class="n">printf</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="err">#</span><span class="n">define</span> <span class="n">TRACE</span> <span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="n">printf</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码初看没什么问题，如果_DEBUG打开TRACE就执行printf，否则TRACE就是一个空操作。但是情况真的跟想当然一样吗？请看以下代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define _DEBUG</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef _DEBUG</span>
</span><span class='line'>  <span class="err">#</span><span class="n">define</span> <span class="n">TRACE</span> <span class="n">printf</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="err">#</span><span class="n">define</span> <span class="n">TRACE</span> <span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="n">printf</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">TRACE</span><span class="p">(</span><span class="s">&quot;OK!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Why?</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>分别打开关闭<em>DEBUG编译执行看看结果是什么？会不会觉得比较奇怪？如果我把#define </em>DEBUG注释掉，理论上应该什么都不打印。其实这个问题我们只要把宏展开就可以发现，代码其实是这样的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;OK!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Why?</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>修复这个问题的方法有两个：</p>

<ol>
<li>在所有调用TRACE的地方用{}包起来，这个改动量太大了，最后没有采用。</li>
<li>用while取代if，这样展开就没有问题了。而且只要修改一个公共的头文件就可以了。</li>
</ol>


<p>最终代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#ifdef _DEBUG</span>
</span><span class='line'>  <span class="err">#</span><span class="n">define</span> <span class="n">TRACE</span> <span class="n">printf</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="err">#</span><span class="n">define</span> <span class="n">TRACE</span> <span class="k">while</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="n">printf</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面例子的代码展开就可以按照期望运行了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;OK!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Why?</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式 创建型：原型]]></title>
    <link href="http://yingl.github.io/blog/2014/04/16/dp-creational-prototype/"/>
    <updated>2014-04-16T01:53:44+08:00</updated>
    <id>http://yingl.github.io/blog/2014/04/16/dp-creational-prototype</id>
    <content type="html"><![CDATA[<h3>原型 Prototype</h3>

<p><strong>定义</strong></p>

<p><a href="http://zh.wikipedia.org/wiki/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F">Wiki链接</a>。通过“复制”一个已经存在的实例来返回新的实例,而不是新建实例。被复制的实例就是我们所称的“原型”，这个原型是可定制的。原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程序运行更高效；或者创建值相等，只是命名不一样的同类数据。</p>

<!--more-->


<p><strong>用户场景</strong></p>

<p>Wiki已经讲的很清楚了。简单来说就是把一个复杂的对象创建过程简化成复制粘贴的形式。需要注意的是我们在复制原型的时候使用深拷贝还是浅拷贝。此外该模式还经常和工厂模式一起使用，因为原型可以用工厂来构建。看了以下例子后可能会有一个疑问，为什么要提供一个clone方法，而不是直接调用拷贝构造函数？因为C++是静态语言，我们在复制原型时并不知道它是具体那个类型，而clone的话这个类自己负责拷贝，只需要返回一个基类类型的指针就可以了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Prototype</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Prototype</span><span class="o">*</span> <span class="n">clone</span><span class="p">()</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Product</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Prototype</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Product</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Take long time to create a product.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Product</span><span class="p">(</span><span class="k">const</span> <span class="n">Product</span><span class="o">&amp;</span> <span class="n">product</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Copy a product is so fast.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Prototype</span><span class="o">*</span> <span class="n">clone</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">Product</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Prototype</span> <span class="o">*</span><span class="n">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Product</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Prototype</span> <span class="o">*</span><span class="n">p2</span> <span class="o">=</span> <span class="n">p1</span><span class="o">-&gt;</span><span class="n">clone</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Prototype</span> <span class="o">*</span><span class="n">p3</span> <span class="o">=</span> <span class="n">p2</span><span class="o">-&gt;</span><span class="n">clone</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式 创建型：生成器]]></title>
    <link href="http://yingl.github.io/blog/2014/04/05/dp-creational-builder/"/>
    <updated>2014-04-05T16:29:57+08:00</updated>
    <id>http://yingl.github.io/blog/2014/04/05/dp-creational-builder</id>
    <content type="html"><![CDATA[<h3>生成器 Builder</h3>

<p><strong>定义</strong></p>

<p><a href="http://zh.wikipedia.org/wiki/%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F">Wiki链接</a>。又名：建造模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。</p>

<!--more-->


<p><strong>用户场景</strong></p>

<p>我们已生成汽车做为例子。虽然不同的车厂生成不同品牌的汽车，但是很多零部件的通用的，不同品牌的汽车只是把他们组合起来。比如轮胎选择米其林或固特异，变速箱采用ZF或爱信。工厂在为某个新品牌新建生产线的时候只要选择不同的供应商就可以了，而不需要所有零件都自己从头生产。例子代码如下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Tire</span> <span class="p">{};</span>  <span class="c1">// 轮胎</span>
</span><span class='line'><span class="k">class</span> <span class="nc">GoodYearTire</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Tire</span> <span class="p">{};</span>  <span class="c1">// 固特异轮胎</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MichelinTire</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Tire</span> <span class="p">{};</span>  <span class="c1">// 米其林轮胎</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">GearBox</span> <span class="p">{};</span> <span class="c1">// 变速箱</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ZFGearBox</span> <span class="o">:</span> <span class="k">public</span> <span class="n">GearBox</span> <span class="p">{};</span>  <span class="c1">// ZF变速箱</span>
</span><span class='line'><span class="k">class</span> <span class="nc">AWGearBox</span> <span class="o">:</span> <span class="k">public</span> <span class="n">GearBox</span> <span class="p">{};</span>  <span class="c1">// 爱信变速箱</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Car</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Car</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">,</span> <span class="n">Tire</span> <span class="o">*</span><span class="n">tires</span><span class="p">,</span> <span class="n">GearBox</span> <span class="o">*</span><span class="n">gearBox</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">_name</span> <span class="o">=</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>      <span class="n">_tires</span> <span class="o">=</span> <span class="n">tires</span><span class="p">;</span>
</span><span class='line'>      <span class="n">_gearBox</span> <span class="o">=</span> <span class="n">gearBox</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Car</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">delete</span><span class="p">[]</span> <span class="n">_tires</span><span class="p">;</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">_gearBox</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">showInfo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;I am a &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; car.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>  <span class="n">string</span> <span class="n">_name</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Tire</span> <span class="o">*</span><span class="n">_tires</span><span class="p">;</span>       <span class="c1">// 轮胎</span>
</span><span class='line'>  <span class="n">GearBox</span> <span class="o">*</span><span class="n">_gearBox</span><span class="p">;</span>  <span class="c1">// 变速箱</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 生产线</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CarBuilder</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Car</span><span class="o">*</span> <span class="n">produce</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 高尔夫生产线</span>
</span><span class='line'><span class="k">class</span> <span class="nc">GolfCarBuilder</span> <span class="o">:</span> <span class="k">public</span> <span class="n">CarBuilder</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Car</span><span class="o">*</span> <span class="n">produce</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 使用固特异轮胎和ZF变速箱</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">Car</span><span class="p">(</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;Golf&quot;</span><span class="p">),</span> <span class="k">new</span> <span class="n">GoodYearTire</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="k">new</span> <span class="n">ZFGearBox</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 宝马生产线</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BMWCarBuilder</span> <span class="o">:</span> <span class="k">public</span> <span class="n">CarBuilder</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Car</span><span class="o">*</span> <span class="n">produce</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 使用米其林轮胎和爱信变速箱</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">Car</span><span class="p">(</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;BMW&quot;</span><span class="p">),</span> <span class="k">new</span> <span class="n">MichelinTire</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="k">new</span> <span class="n">AWGearBox</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 汽车工厂</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Factory</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Car</span><span class="o">*</span> <span class="n">produce</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">setBuilder</span><span class="p">(</span><span class="n">CarBuilder</span><span class="o">*</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 大众工厂，我们有高尔夫和宝马两条生产线</span>
</span><span class='line'><span class="k">class</span> <span class="nc">VWFactory</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Factory</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">VWFactory</span><span class="p">(</span><span class="n">CarBuilder</span> <span class="o">*</span><span class="n">carBuilder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">_carBuilder</span> <span class="o">=</span> <span class="n">carBuilder</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">setBuilder</span><span class="p">(</span><span class="n">CarBuilder</span> <span class="o">*</span><span class="n">carBuilder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">_carBuilder</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">_carBuilder</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">_carBuilder</span> <span class="o">=</span> <span class="n">carBuilder</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Car</span><span class="o">*</span> <span class="n">produce</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">_carBuilder</span><span class="o">-&gt;</span><span class="n">produce</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>    <span class="n">CarBuilder</span> <span class="o">*</span><span class="n">_carBuilder</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">CarBuilder</span> <span class="o">*</span><span class="n">golfCarBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GolfCarBuilder</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CarBuilder</span> <span class="o">*</span><span class="n">bmwCarBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BMWCarBuilder</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Factory</span> <span class="o">*</span><span class="n">vwFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VWFactory</span><span class="p">(</span><span class="n">golfCarBuilder</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Car</span> <span class="o">*</span><span class="n">golfCar</span> <span class="o">=</span> <span class="n">vwFactory</span><span class="o">-&gt;</span><span class="n">produce</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">vwFactory</span><span class="o">-&gt;</span><span class="n">setBuilder</span><span class="p">(</span><span class="n">bmwCarBuilder</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Car</span> <span class="o">*</span><span class="n">bmwCar</span> <span class="o">=</span> <span class="n">vwFactory</span><span class="o">-&gt;</span><span class="n">produce</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">golfCar</span><span class="o">-&gt;</span><span class="n">showInfo</span><span class="p">();</span>
</span><span class='line'>  <span class="n">bmwCar</span><span class="o">-&gt;</span><span class="n">showInfo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">delete</span> <span class="n">bmwCar</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">golfCar</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">vwFactory</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">bmwCarBuilder</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">golfCarBuilder</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式 创建型：抽象工厂]]></title>
    <link href="http://yingl.github.io/blog/2014/04/01/dp-creational-abstract-factory/"/>
    <updated>2014-04-01T21:46:00+08:00</updated>
    <id>http://yingl.github.io/blog/2014/04/01/dp-creational-abstract-factory</id>
    <content type="html"><![CDATA[<h3>抽象工厂 Abstract Factory</h3>

<p><strong>定义</strong></p>

<p><a href="http://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F">Wiki链接</a>。为一个产品族提供了统一的创建接口。当需要这个产品族的某一系列的时候，可以从抽象工厂中选出相应的系列创建一个具体的工厂类。</p>

<!--more-->


<p><strong>用户场景</strong></p>

<p>还是继续“<a href="">工厂模式</a>”关于坦克生产的话题。话说我们准备修改代码，不再搞单独的坦克工厂、军舰厂和其它厂了，取而代之的是统一的兵工厂。也就是说俄国的兵工厂生产苏联的武器，美国的兵工厂生产美国的武器。反面例子就不举了，要问的还是两个老问题：1、新增加一个国家的兵工厂怎么处理？2、如果代码已二进制发布，别人如何方便的进行扩展？</p>

<p>解决方案和工厂方法很像，只不过现在的工厂提供了一组方法。先定义一个兵工厂接口，声明一系列方法告诉别人我要生产那些装备，剩下的就是各个具体兵工厂继承并实现这些方法。如果我们套定义的话，就是为一系列武器的创建提供了统一的接口，在需要的时候我们选择某个具体的兵工厂实现来完成任务。例子代码如下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Weapon</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Tank</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Weapon</span> <span class="p">{};</span>
</span><span class='line'><span class="k">class</span> <span class="nc">USTank</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Tank</span> <span class="p">{};</span>
</span><span class='line'><span class="k">class</span> <span class="nc">RussiaTank</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Tank</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Warship</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Weapon</span> <span class="p">{};</span>
</span><span class='line'><span class="k">class</span> <span class="nc">USWarship</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Warship</span> <span class="p">{};</span>
</span><span class='line'><span class="k">class</span> <span class="nc">RussiaWarship</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Warship</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 兵工厂</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Armory</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Tank</span><span class="o">*</span> <span class="n">generateTank</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Warship</span><span class="o">*</span> <span class="n">generateWarship</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 美国兵工厂</span>
</span><span class='line'><span class="k">class</span> <span class="nc">USArmory</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Armory</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Tank</span><span class="o">*</span> <span class="n">generateTank</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;US generates a Tank.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">USTank</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Warship</span><span class="o">*</span> <span class="n">generateWarship</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;US generate a Warship.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">USWarship</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 俄国兵工厂</span>
</span><span class='line'><span class="k">class</span> <span class="nc">RussiaArmory</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Armory</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Tank</span><span class="o">*</span> <span class="n">generateTank</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Russia generates a Tank.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">RussiaTank</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Warship</span><span class="o">*</span> <span class="n">generateWarship</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Russia generate a Warship.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">RussiaWarship</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Armory</span> <span class="o">*</span><span class="n">pUSArmory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">USArmory</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Armory</span> <span class="o">*</span><span class="n">pRussiaArmory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RussiaArmory</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Tank</span> <span class="o">*</span><span class="n">pUSTank</span> <span class="o">=</span> <span class="n">pUSArmory</span><span class="o">-&gt;</span><span class="n">generateTank</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Warship</span> <span class="o">*</span><span class="n">pUSWarship</span> <span class="o">=</span> <span class="n">pUSArmory</span><span class="o">-&gt;</span><span class="n">generateWarship</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Tank</span> <span class="o">*</span><span class="n">pRussiaTank</span> <span class="o">=</span> <span class="n">pRussiaArmory</span><span class="o">-&gt;</span><span class="n">generateTank</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Warship</span> <span class="o">*</span><span class="n">pRussiaWarship</span> <span class="o">=</span> <span class="n">pRussiaArmory</span><span class="o">-&gt;</span><span class="n">generateWarship</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">delete</span> <span class="n">pRussiaWarship</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">pRussiaTank</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">pUSWarship</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">pUSTank</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">pRussiaArmory</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">pUSArmory</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式 创建型：工厂方法]]></title>
    <link href="http://yingl.github.io/blog/2014/03/31/dp-creational-factory-method/"/>
    <updated>2014-03-31T22:00:59+08:00</updated>
    <id>http://yingl.github.io/blog/2014/03/31/dp-creational-factory-method</id>
    <content type="html"><![CDATA[<p>上周日给振华港机做了一个关于设计模式的培训，同学们反响还不错。我把相关材料整理了一下，将以连载的形式发布在这里与大家一起分享。从我个人的角度并不推荐四人帮的那本经典著作，太理论，太学术。对于大多数人来说，结合实际场景简单快速上手才是王道。淘宝黎叔就说过：技术是要落地的，不然就成了学术。即使是一个好东西，学习成本太高的话，对企业来说性价比就不高了。我们做培训也是，半天就结合实例把3类23种设计模式讲明白。如果看书的话，我推荐《<a href="http://book.douban.com/subject/2334288/">大话设计模式</a>》。</p>

<h3>工厂方法 Factory Method</h3>

<p><strong>定义</strong></p>

<p><a href="http://zh.wikipedia.org/wiki/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">Wiki链接</a>。定义一个接口用于创建对象，但是让子类决定初始化哪个类。工厂方法把一个类的初始化下放到子类。</p>

<!--more-->


<p><strong>用户场景</strong></p>

<p>以游戏红色警报为例，俄国美国都会生产坦克，如果我们需要一个生产坦克的函数负责所有坦克的生产，那么我们该怎么实现？很多同学第一反应是这样的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">Tank</span><span class="o">*</span> <span class="n">generateTank</span><span class="p">(</span><span class="kt">int</span> <span class="n">tankType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">RUSSIA</span> <span class="o">==</span> <span class="n">tankType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">RussiaTank</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">US</span> <span class="o">==</span> <span class="n">tankType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">USTank</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看着也能正确运行。但是问题来了，如果我们想生产法国坦克怎么办？如果我们把代码以二进制库的形式打包在市场上卖给其它公司，别人想生产其它坦克怎么办？如果是我们自己的话还好办，改generateTank函数就可以了，可是买了我们引擎的其它公司怎么办？</p>

<p>先回忆一下面向对象的一条重要原则；开放－封闭。对修改封闭，对扩展开放。如果我们想生产新的坦克，应该采用扩展而不是修改的方式。工厂方法模式开始上场了，理论不多说，直接例子分析来解决现在的问题。首先我们需要一个工厂接口TankFactory，提供一个generate方法。然后继承这个接口，分别定义USTankFactory和RussiaTankFactory，各自实现generate方法生产不同的坦克。generateTank方法的参数由tankType改为TankFactory*，那么我们上层的代码在掌握了各种坦克工厂的信息后，只要把对应坦克工厂作为参数传下来就可以了。在工程实践里面一个最基本的要求就是下层代码改得越少越好。现在附上新的代码以供参考。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Tank</span> <span class="p">{};</span>
</span><span class='line'><span class="k">class</span> <span class="nc">USTank</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Tank</span> <span class="p">{};</span>
</span><span class='line'><span class="k">class</span> <span class="nc">RussiaTank</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Tank</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TankFactory</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Tank</span><span class="o">*</span> <span class="n">generate</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">USTankFactory</span> <span class="o">:</span> <span class="k">public</span> <span class="n">TankFactory</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Tank</span><span class="o">*</span> <span class="n">generate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;US generates a Tank.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">USTank</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">RussiaTankFactory</span> <span class="o">:</span> <span class="k">public</span> <span class="n">TankFactory</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="n">Tank</span><span class="o">*</span> <span class="n">generate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Russia generates a Tank.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">RussiaTank</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Tank</span><span class="o">*</span> <span class="n">generateTank</span><span class="p">(</span><span class="n">TankFactory</span> <span class="o">*</span><span class="n">pTankFactory</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">pTankFactory</span><span class="o">-&gt;</span><span class="n">generate</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">TankFactory</span> <span class="o">*</span><span class="n">pUSTankFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">USTankFactory</span><span class="p">;</span>
</span><span class='line'>  <span class="n">TankFactory</span> <span class="o">*</span><span class="n">pRussiaTankFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RussiaTankFactory</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Tank</span> <span class="o">*</span><span class="n">pUSTank</span> <span class="o">=</span> <span class="n">generateTank</span><span class="p">(</span><span class="n">pUSTankFactory</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Tank</span> <span class="o">*</span><span class="n">pRussiaTank</span> <span class="o">=</span> <span class="n">generateTank</span><span class="p">(</span><span class="n">pRussiaTankFactory</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">delete</span> <span class="n">pRussiaTank</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">pUSTank</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">pRussiaTankFactory</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">pUSTankFactory</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[38电影抢票活动测试分享]]></title>
    <link href="http://yingl.github.io/blog/2014/03/30/38-movie-falsh-sale/"/>
    <updated>2014-03-30T21:01:15+08:00</updated>
    <id>http://yingl.github.io/blog/2014/03/30/38-movie-falsh-sale</id>
    <content type="html"><![CDATA[<p>4月12日拔丝活动（buzz.cn）在上海有一场关于移动测试交流的活动，我会分享淘宝手机生活节测试的一些心得和经验。在这里先分享我直接负责的38电影抢票活动的总结。</p>

<!--more-->


<h3>项目时间点</h3>

<table>
<thead>
<tr>
<th></th>
<th align="left"><em>日期</em></th>
<th align="left"><em>事件</em></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">1/25 &ndash; 1/27 </td>
<td align="left">测试人员投入，开始编写测试用例，准备数据。</td>
</tr>
<tr>
<td></td>
<td align="left">1/28 </td>
<td align="left">冒烟测试完成</td>
</tr>
<tr>
<td></td>
<td align="left">2/12 &ndash; 2/11 </td>
<td align="left">日常环境测试完成</td>
</tr>
<tr>
<td></td>
<td align="left">2/12 &ndash; 3/1 </td>
<td align="left">1. 预发环境功能测试<br>2. 性能测试<br>3. 影院现场测试<br>4. 影院排期数据生成</td>
</tr>
<tr>
<td></td>
<td align="left">3/2 </td>
<td align="left">活动预热页面上线</td>
</tr>
<tr>
<td></td>
<td align="left">3/5 </td>
<td align="left">抢票活动开始，晚上有新需求大改版</td>
</tr>
<tr>
<td></td>
<td align="left">3/6 </td>
<td align="left">下午新版页面上线</td>
</tr>
<tr>
<td></td>
<td align="left">3/9 </td>
<td align="left">活动顺利结束</td>
</tr>
</tbody>
</table>


<p>虽然测因为其它项目的原因晚两天投入项目，但整个项目基本还是按照计划的时间节点前进，虽然预热页面上线时间晚了一天，但主要是线下影院无法准确提供3/8当天的准确排期。</p>

<h3>活动型项目的特点</h3>

<ol>
<li>短平快。整个项目扣除春节长假和额外休假，实际施工时间仅为1个月。包含了从需求分析、设计评审到开发测试整个流程。</li>
<li>投入资源有限。活动只投入一个后端、一个前端和一个测试。</li>
<li>一次性代码多。很多代码针对活动的特殊场景做了特殊的逻辑和硬编码处理，基本不考虑重用性。</li>
<li>测试链路长，上下游组件依赖关系复杂。</li>
<li>非技术因素影响复杂。必须对线下数据进行清洗。而且活动分线上线下部分，线下部分有很多不可控风险因素需要考虑。</li>
<li>及时响应前线反馈。</li>
</ol>


<h3>测试经验分享</h3>

<ol>
<li>Web UI自动化测试这种高大上东西基本就不考虑了。等这套东西能稳定跑起来活动都结束了，放到下次活动又是另一套玩法了。</li>
<li>测试模块化。由于测试链路长，依赖组件多，等各组件联调完成再展开测试时间已经不够。对此我们做了如下处理：

<ol>
<li>前后端分别生成mock数据进行单元测试。因为即使在测试环境的数据库里生成测试数据也是一件很复杂的工作，所以我们可以用mock数据检查各种复杂场景。这样在联调通过后对系统进行集成测试只要选取少数典型场景进行测试就可以了，大大减少了测试工作量。而且对于后端，可以直接在开发的项目里编写Java单元测试脚本，每次可以自动回归。</li>
<li>坐在一起工作。发现问题提交到bug系统后不要等待对方回复然后修复，直接抓人当面交流。如果已经清楚bug原因和修复方案的话，直接修改然后拉对方做代码评审是效率最高的做法。</li>
<li>对于上下游组件的测试，一定要约定好数据交换格式和接口。因为是o2o活动，我们输入的影院数据要经过引擎的处理展现给附近页面，但是这个流程连续三天没有走通，最好发现是数据格式约定有问题，有一个字段引擎默认我们会正确设定所以没有告知，而实际上我们根本不知道这个字段的作用。这个教训值得深刻总结。</li>
</ol>
</li>
<li>对于抢购／秒杀类的活动，一定要注意以下两个问题：

<ol>
<li>性能测试。在第一次性能测试的时候我们发现了缓存没有被正确使用，导致预定的性能指标远远不能达到。</li>
<li>潜在的死锁问题。在一个被精心构造的场景里，我们发现当所有座位被选，即使因为有人因为15分钟内为付款导致座位被释放，其他人也无法进入选座页面选择被释放的座位。后来经过排查，是判断座位释放和更新座位状态的代码逻辑有问题。如果等活动发生时再注意到这个问题，那么很多座位会因为这个原因导致无法被售出。</li>
</ol>
</li>
<li>O2O活动的offline要非常重视，为了保证线下核销能正常进行，我们专门组织了影院实地测试，发现了一系列原来没有充分考虑的问题：

<ol>
<li>影院不认短信核销，必须检查淘宝的卡券包。</li>
<li>现场没有wifi，而且有些影院2G/3G信号不大好，部分影院完全没有信号。</li>
<li>卡券包没有做本地缓存，弱网络情况下花了至少5分钟才打开。考虑活动当天影院淘宝全部包场，如果核销速度慢的话肯定会影响入场进度。</li>
<li>给影院的培训资料全是基于iOS版淘宝的，有些服务员不会使用Android版的客户端。</li>
</ol>
</li>
<li>自动化工具很重要。当天共有超过200家影院超过7000场电影需要排期，运营和影院交流后给出了一套复杂的规则，但是如果人肉做的话至少2人天的工作量，测试在了解需求后主动为运营编写的一个自动排期脚本，几秒钟就能完成排期并生成数据订正脚本。</li>
<li>线下数据靠不住。影院方提供的数据不能100%相信，经常会出现一些莫名其妙的问题。比如座位给多了，场次排重了等。必须根据已有的数据及时核对并反馈。</li>
<li>敏捷！前线的需求就是我们的任务，凌晨2点下班不算太晚，即使在活动最后一天还是有各种突发状况，比如某个影院突然停电，我们必须赶快安排退票补偿事宜。</li>
</ol>


<h3>效果怎么样？</h3>

<p>不谈最后结果的分享都是耍流氓！关于效果吗，参考淘宝官方公布的数字！而且由于对线下测试及时的发现了各类问题，最后3月8号活动当天，核销进展顺利。客服的妹子们只接到了少数几个咨询电话。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开张先打个招聘广告]]></title>
    <link href="http://yingl.github.io/blog/2014/03/18/kai-zhang-xian-da-ge-zhao-pin-guang-gao/"/>
    <updated>2014-03-18T19:24:02+08:00</updated>
    <id>http://yingl.github.io/blog/2014/03/18/kai-zhang-xian-da-ge-zhao-pin-guang-gao</id>
    <content type="html"><![CDATA[<h2>怪兽说开张了！</h2>

<p>WordPress太笨重，Drupal的插件太不友好，折腾了一晚上决定还是拥抱Octopress。今天别的什么就不说了，先打个招聘广告，杭州淘宝技术质量部招聘高级测试开发工程师，上市前最好的机会， 待遇你懂的，而且还有大把水灵灵的妹子等着你哦！级别P6起，能力强P8也是能搞定的。有互联网行业经验的同学优先，没有也不要紧，只要你表现出了足够的技术力或业务洞察力，机会一样大大的。要求如下，仅供参考。</p>

<!--more-->


<h4>岗位描述</h4>

<ol>
<li>参与互联网软件产品测试的全流程，包括参与需求分析、设计评审，制定测试计划，设计和执行测试用例，进行缺陷跟踪和软件质量分析等。</li>
<li>带领其他测试开发工程师执行项目测试，包括制定测试计划，分配测试资源，构建测试环境，执行集成测试，回归测试等。</li>
<li>保证被测系统的质量，并通过测试流程和方法创新，努力提升研发的质量和效率。</li>
</ol>


<h4>岗位要求</h4>

<ol>
<li>工科、计算机或其他相关专业本科以上学历。</li>
<li>熟悉C/C++/Java等至少一种编程语言，有Shell或Ruby/PHP/Perl/Python等使用经验者优先。</li>
<li>至少3年以上软件开发、自动化测试工作经验。</li>
<li>有性能、安全、白盒测试等专业测试领域经验者优先。</li>
<li>具备Android/IOS无线产品、互联网广告、搜索、大数据处理、分布式系统、数据库和网络等业务领域测试经验者优先。</li>
<li>熟悉Linux或Unix操作系统。</li>
<li>精通测试流程和测试用例设计方法,能主动进行技术钻研。</li>
<li>解决复杂问题和编写自动测试工具和系统的能力。</li>
<li>很强的逻辑思维能力，谈判的能力和冲突管理的能力。</li>
<li>善于团队合作，理解和适应变化，以结果和行动为准则，努力追求成功。</li>
</ol>


<h4>联系方式：</h4>

<ol>
<li>微博私信</li>
<li>旺旺：窥基</li>
</ol>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 设计模式 | 怪兽说]]></title>
  <link href="http://blog.monstersay.cn/blog/categories/she-ji-mo-shi/atom.xml" rel="self"/>
  <link href="http://blog.monstersay.cn/"/>
  <updated>2015-02-15T15:02:02+08:00</updated>
  <id>http://blog.monstersay.cn/</id>
  <author>
    <name><![CDATA[窥基／无柳无酒／黑灯瞎火]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式 结构型：桥接]]></title>
    <link href="http://blog.monstersay.cn/blog/2015/02/15/dp-structual-bridge/"/>
    <updated>2015-02-15T12:44:07+08:00</updated>
    <id>http://blog.monstersay.cn/blog/2015/02/15/dp-structual-bridge</id>
    <content type="html"><![CDATA[<h3>桥接 Bridge</h3>

<p><strong>定义</strong></p>

<p>Wiki<a href="http://zh.wikipedia.org/wiki/%E6%A9%8B%E6%8E%A5%E6%A8%A1%E5%BC%8F">链接</a>。号称是最复杂的设计模式之一。它把事物对象和其具体行为、具体特征分离开来，使它们可以各自独立的变化。</p>

<p>设想一下我们要开发一个绘图程序，需要支持不同的形状和不同的颜色，这时我们有以下两种方案可选：</p>

<ul>
<li>为某种形状和颜色的组合提供一个实现版本。</li>
<li>根据设计方案对形状和颜色进行组合。</li>
</ul>


<p>如果选择第一个方案，一旦排列组合爆炸的话我们就处理不过来了。而第二个方案则可以像搭积木一样自由选择，情况就简单多了。</p>

<p>在例子代码中，我们通过形状的抽象基类CShape把颜色CColor组合进来，这样我们就可以非常轻松的实例化出不同形状和颜色的组合。</p>

<p>```cpp</p>

<h1>include <iostream></h1>

<p>using namespace std;</p>

<p>class CColor {
  public:</p>

<pre><code>virtual void paint() const = 0;
</code></pre>

<p>};</p>

<p>class CRed : public CColor {
  public:</p>

<pre><code>void paint() const { cout &lt;&lt; "Paint by RED." &lt;&lt; endl; }
</code></pre>

<p>};</p>

<p>class CBlue : public CColor {
  public:</p>

<pre><code>void paint() const { cout &lt;&lt; "Paint by BLUE." &lt;&lt; endl; }
</code></pre>

<p>};</p>

<p>class CShape {
  public:</p>

<pre><code>CShape(const CColor *pColor) { _pColor = pColor; }

virtual void draw() = 0;
</code></pre>

<p>  protected:</p>

<pre><code>const CColor *_pColor;
</code></pre>

<p>};</p>

<p>class CCircle : public CShape  {
  public:</p>

<pre><code>CCircle(const CColor *pColor) : CShape(pColor) {}

void draw() {
  cout &lt;&lt; "Circle: ";
  _pColor-&gt;paint();
</code></pre>

<p>  }
};</p>

<p>int main(void) {
  CColor <em>pColor = new CRed();
  CShape </em>pShape = new CCircle(pColor);
  pShape->draw();
}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式 结构型：适配器]]></title>
    <link href="http://blog.monstersay.cn/blog/2014/08/12/dp-structural-adapter/"/>
    <updated>2014-08-12T20:39:40+08:00</updated>
    <id>http://blog.monstersay.cn/blog/2014/08/12/dp-structural-adapter</id>
    <content type="html"><![CDATA[<h3>适配器 Adapter</h3>

<p><strong>定义</strong></p>

<p>Wiki<a href="http://zh.wikipedia.org/wiki/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F">链接</a>。将一个类的接口转接成用户所期待的。一个适配使得因接口不兼容而不能在一起工作的类工作在一起，做法是将类别自己的接口包裹在一个已存在的类中。</p>

<!--more-->


<p>这个简单来说就像Mac接显示器需要一个额外的转接头一样，这个转接头扮演的就是适配器的角色。</p>

<p>```cpp</p>

<h1>include <iostream></h1>

<p>using namespace std;</p>

<p>class Monitor {
public:
  void monitor_display() {</p>

<pre><code>cout &lt;&lt; "Monitor display." &lt;&lt; endl;  
</code></pre>

<p>  }
};</p>

<p>class Adapter {
public:
  void display() {</p>

<pre><code>_monitor.monitor_display();
</code></pre>

<p>  }</p>

<p>protected:
  Monitor _monitor;
};</p>

<p>class Mac {
public:
  void display() {</p>

<pre><code>_adapter.display();
</code></pre>

<p>  }</p>

<p>protected:
  Adapter _adapter;
};</p>

<p>int main(void) {
  Mac mac;</p>

<p>  mac.display();
}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式 结构型：外观]]></title>
    <link href="http://blog.monstersay.cn/blog/2014/07/03/dp-structural-facade/"/>
    <updated>2014-07-03T21:22:17+08:00</updated>
    <id>http://blog.monstersay.cn/blog/2014/07/03/dp-structural-facade</id>
    <content type="html"><![CDATA[<h3>外观 Facade</h3>

<p><strong>定义</strong></p>

<p>Wiki<a href="http://zh.wikipedia.org/zh-cn/%E5%A4%96%E8%A7%80%E6%A8%A1%E5%BC%8F">链接</a>。它为子系统中的一组接口提供一个统一的高层接口，使得子系统更容易使用。</p>

<!--more-->


<p>这个模式估计是所有设计模式里最简单的了。我们以计算机为例，一个开机动作涉及到CPU启动，硬盘读取，内存装载等一系列动作，但是对于用户来说，只要按一下电源键就可以了。我们可以把开机抽象成计算机对象的一个方法，为了完成一次开机，它完成了所有涉及CPU、内存和硬盘的相关操作。</p>

<p>```cpp</p>

<h1>include <iostream></h1>

<p>using namespace std;</p>

<p>class CPU {
public:
  void freeze(void) {</p>

<pre><code>cout &lt;&lt; "CPU freeze" &lt;&lt; endl;
</code></pre>

<p>  }</p>

<p>  void jump(void) {</p>

<pre><code>cout &lt;&lt; "CPU jump" &lt;&lt; endl;
</code></pre>

<p>  }</p>

<p>  void execute(void) {</p>

<pre><code>cout &lt;&lt; "CPU execute" &lt;&lt; endl;
</code></pre>

<p>  }
};</p>

<p>class Memory {
public:
  void load(void) {</p>

<pre><code>cout &lt;&lt; "Memory load" &lt;&lt; endl;
</code></pre>

<p>  }
};</p>

<p>class HardDisk {
public:
  void read(void) {</p>

<pre><code>cout &lt;&lt; "HardDisk read" &lt;&lt; endl;
</code></pre>

<p>  }
};</p>

<p>class Computer {
private:
  CPU cpu;
  Memory memory;
  HardDisk hard_disk;</p>

<p>public:
  void power_on(void) {</p>

<pre><code>cpu.freeze();
hard_disk.read();
memory.load();
cout &lt;&lt; "Computer power on" &lt;&lt; endl;
</code></pre>

<p>  }
};</p>

<p>int main(void) {
  Computer computer;</p>

<p>  computer.power_on();
}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式 创建型：单例]]></title>
    <link href="http://blog.monstersay.cn/blog/2014/06/10/dp-creational-singleton/"/>
    <updated>2014-06-10T21:10:19+08:00</updated>
    <id>http://blog.monstersay.cn/blog/2014/06/10/dp-creational-singleton</id>
    <content type="html"><![CDATA[<h3>单例 Singleton</h3>

<p><strong>定义</strong></p>

<p>Wiki<a href="http://zh.wikipedia.org/wiki/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">链接</a>。单例对象的类必须保证只有一个实例存在。</p>

<!--more-->


<p>为什么需要单例，其实理由很简单，为避免重复建设。比如我们前面讲到的工厂模式，相同的工厂只要有一个就够了，多了就浪费了，管理起来也不方便。下面具体讲一下单例的实现。</p>

<p>实现一（一般面试的标准答案）</p>

<p>```cpp
lock g_lock;</p>

<p>class Singeleton {
  public:</p>

<pre><code>static Obj* getInstance() 
  if (NULL == _instance) {
    // 加锁确保线程安全
    lock(&amp;g_lock);
    // 这部判断很重要，很有可能其它线程刚调用完getInstance，_instance已被创建。
    // 如果这里不判断是否NULL，很可能又创建一个新的Obj对象。
    if (NULL == _instance) {
      _instance = new Obj;
    }
    unlock(&amp;g_lock);
  }

  return _instance;
}
</code></pre>

<p>  protected:</p>

<pre><code>static Obj *_instance;
</code></pre>

<p>};</p>

<p>Obj* Singeleton::_instance = NULL;
```</p>

<p>实现二（利用静态变量简化多线程的情况，有兴趣的话可以看下GTest的源码，就是这么做的。）</p>

<p>```cpp
template<class T> class Singleton {
  public:</p>

<pre><code>static T* getInstance() {
  static T _instance;

  return &amp;_instance;
}   
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式 创建型：原型]]></title>
    <link href="http://blog.monstersay.cn/blog/2014/04/16/dp-creational-prototype/"/>
    <updated>2014-04-16T01:53:44+08:00</updated>
    <id>http://blog.monstersay.cn/blog/2014/04/16/dp-creational-prototype</id>
    <content type="html"><![CDATA[<h3>原型 Prototype</h3>

<p><strong>定义</strong></p>

<p>Wiki<a href="http://zh.wikipedia.org/wiki/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F">链接</a>。通过“复制”一个已经存在的实例来返回新的实例,而不是新建实例。被复制的实例就是我们所称的“原型”，这个原型是可定制的。原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程序运行更高效；或者创建值相等，只是命名不一样的同类数据。</p>

<!--more-->


<p><strong>用户场景</strong></p>

<p>Wiki已经讲的很清楚了。简单来说就是把一个复杂的对象创建过程简化成复制粘贴的形式。需要注意的是我们在复制原型的时候使用深拷贝还是浅拷贝。此外该模式还经常和工厂模式一起使用，因为原型可以用工厂来构建。看了以下例子后可能会有一个疑问，为什么要提供一个clone方法，而不是直接调用拷贝构造函数？因为C++是静态语言，我们在复制原型时并不知道它是具体那个类型，而clone的话这个类自己负责拷贝，只需要返回一个基类类型的指针就可以了。</p>

<p>```cpp</p>

<h1>include <iostream></h1>

<h1>include <string></h1>

<p>using namespace std;</p>

<p>class Prototype {
  public:</p>

<pre><code>virtual Prototype* clone() const = 0;
</code></pre>

<p>};</p>

<p>class Product : public Prototype {
  public:</p>

<pre><code>Product() {
  cout &lt;&lt; "Take long time to create a product." &lt;&lt; endl;
}   

Product(const Product&amp; product) {
  cout &lt;&lt; "Copy a product is so fast." &lt;&lt; endl;
}   

Prototype* clone() const {
  return new Product(*this);
}   
</code></pre>

<p>};</p>

<p>int main(void) {
  Prototype <em>p1 = new Product;
  Prototype </em>p2 = p1->clone();
  Prototype *p3 = p2->clone();
}
```</p>
]]></content>
  </entry>
  
</feed>

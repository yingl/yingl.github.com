<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 设计模式 | 怪兽说]]></title>
  <link href="http://yingl.github.io/blog/categories/she-ji-mo-shi/atom.xml" rel="self"/>
  <link href="http://yingl.github.io/"/>
  <updated>2014-05-04T13:16:53+08:00</updated>
  <id>http://yingl.github.io/</id>
  <author>
    <name><![CDATA[窥基／无柳无酒／黑灯瞎火]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式 创建型：原型]]></title>
    <link href="http://yingl.github.io/blog/2014/04/16/dp-creational-prototype/"/>
    <updated>2014-04-16T01:53:44+08:00</updated>
    <id>http://yingl.github.io/blog/2014/04/16/dp-creational-prototype</id>
    <content type="html"><![CDATA[<h3>原型 Prototype</h3>

<p><strong>定义</strong></p>

<p><a href="http://zh.wikipedia.org/wiki/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F">Wiki链接</a>。通过“复制”一个已经存在的实例来返回新的实例,而不是新建实例。被复制的实例就是我们所称的“原型”，这个原型是可定制的。原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程序运行更高效；或者创建值相等，只是命名不一样的同类数据。</p>

<!--more-->


<p><strong>用户场景</strong></p>

<p>Wiki已经讲的很清楚了。简单来说就是把一个复杂的对象创建过程简化成复制粘贴的形式。需要注意的是我们在复制原型的时候使用深拷贝还是浅拷贝。此外该模式还经常和工厂模式一起使用，因为原型可以用工厂来构建。看了以下例子后可能会有一个疑问，为什么要提供一个clone方法，而不是直接调用拷贝构造函数？因为C++是静态语言，我们在复制原型时并不知道它是具体那个类型，而clone的话这个类自己负责拷贝，只需要返回一个基类类型的指针就可以了。</p>

<p>``` cpp main.cpp</p>

<h1>include <iostream></h1>

<h1>include <string></h1>

<p>using namespace std;</p>

<p>class Prototype {
  public:</p>

<pre><code>virtual Prototype* clone() const = 0;
</code></pre>

<p>};</p>

<p>class Product : public Prototype {
  public:</p>

<pre><code>Product() {
  cout &lt;&lt; "Take long time to create a product." &lt;&lt; endl;
}   

Product(const Product&amp; product) {
  cout &lt;&lt; "Copy a product is so fast." &lt;&lt; endl;
}   

Prototype* clone() const {
  return new Product(*this);
}   
</code></pre>

<p>};</p>

<p>int main(void) {
  Prototype <em>p1 = new Product;
  Prototype </em>p2 = p1->clone();
  Prototype *p3 = p2->clone();
}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式 创建型：生成器]]></title>
    <link href="http://yingl.github.io/blog/2014/04/05/dp-creational-builder/"/>
    <updated>2014-04-05T16:29:57+08:00</updated>
    <id>http://yingl.github.io/blog/2014/04/05/dp-creational-builder</id>
    <content type="html"><![CDATA[<h3>生成器 Builder</h3>

<p><strong>定义</strong></p>

<p><a href="http://zh.wikipedia.org/wiki/%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F">Wiki链接</a>。又名：建造模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。</p>

<!--more-->


<p><strong>用户场景</strong></p>

<p>我们已生成汽车做为例子。虽然不同的车厂生成不同品牌的汽车，但是很多零部件的通用的，不同品牌的汽车只是把他们组合起来。比如轮胎选择米其林或固特异，变速箱采用ZF或爱信。工厂在为某个新品牌新建生产线的时候只要选择不同的供应商就可以了，而不需要所有零件都自己从头生产。例子代码如下。</p>

<p>``` cpp main.cpp</p>

<h1>include <iostream></h1>

<h1>include <string></h1>

<p>using namespace std;</p>

<p>class Tire {};  // 轮胎
class GoodYearTire : public Tire {};  // 固特异轮胎
class MichelinTire : public Tire {};  // 米其林轮胎</p>

<p>class GearBox {}; // 变速箱
class ZFGearBox : public GearBox {};  // ZF变速箱
class AWGearBox : public GearBox {};  // 爱信变速箱</p>

<p>class Car {
  public:</p>

<pre><code>Car(string name, Tire *tires, GearBox *gearBox) {
  _name = name;
  _tires = tires;
  _gearBox = gearBox;
}

Car() {
  delete[] _tires;
  delete _gearBox;
}

void showInfo() {
  cout &lt;&lt; "I am a " &lt;&lt; _name &lt;&lt; " car." &lt;&lt; endl;
}
</code></pre>

<p>protected:
  string <em>name;
  Tire *</em>tires;       // 轮胎
  GearBox *_gearBox;  // 变速箱
};</p>

<p>// 生产线
class CarBuilder {
  public:</p>

<pre><code>virtual Car* produce() = 0;
</code></pre>

<p>};</p>

<p>// 高尔夫生产线
class GolfCarBuilder : public CarBuilder {
  public:</p>

<pre><code>virtual Car* produce() {
  // 使用固特异轮胎和ZF变速箱
  return new Car(string("Golf"), new GoodYearTire[4], new ZFGearBox);
}
</code></pre>

<p>};</p>

<p>// 宝马生产线
class BMWCarBuilder : public CarBuilder {
  public:</p>

<pre><code>virtual Car* produce() {
  // 使用米其林轮胎和爱信变速箱
  return new Car(string("BMW"), new MichelinTire[4], new AWGearBox);
}
</code></pre>

<p>};</p>

<p>// 汽车工厂
class Factory {
  public:</p>

<pre><code>virtual Car* produce() = 0;
virtual void setBuilder(CarBuilder*) = 0;
</code></pre>

<p>};</p>

<p>// 大众工厂，我们有高尔夫和宝马两条生产线
class VWFactory : public Factory {
  public:</p>

<pre><code>VWFactory(CarBuilder *carBuilder) {
  _carBuilder = carBuilder;
}

void setBuilder(CarBuilder *carBuilder) {
  if (_carBuilder != NULL) {
    delete _carBuilder;
  }

  _carBuilder = carBuilder;
}

virtual Car* produce() {
  return _carBuilder-&gt;produce();
}
</code></pre>

<p>  protected:</p>

<pre><code>CarBuilder *_carBuilder;
</code></pre>

<p>};</p>

<p>int main(void) {
  CarBuilder <em>golfCarBuilder = new GolfCarBuilder;
  CarBuilder </em>bmwCarBuilder = new BMWCarBuilder;
  Factory *vwFactory = new VWFactory(golfCarBuilder);</p>

<p>  Car *golfCar = vwFactory->produce();</p>

<p>  vwFactory->setBuilder(bmwCarBuilder);</p>

<p>  Car *bmwCar = vwFactory->produce();</p>

<p>  golfCar->showInfo();
  bmwCar->showInfo();</p>

<p>  delete bmwCar;
  delete golfCar;
  delete vwFactory;
  delete bmwCarBuilder;
  delete golfCarBuilder;
}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式 创建型：抽象工厂]]></title>
    <link href="http://yingl.github.io/blog/2014/04/01/dp-creational-abstract-factory/"/>
    <updated>2014-04-01T21:46:00+08:00</updated>
    <id>http://yingl.github.io/blog/2014/04/01/dp-creational-abstract-factory</id>
    <content type="html"><![CDATA[<h3>抽象工厂 Abstract Factory</h3>

<p><strong>定义</strong></p>

<p><a href="http://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F">Wiki链接</a>。为一个产品族提供了统一的创建接口。当需要这个产品族的某一系列的时候，可以从抽象工厂中选出相应的系列创建一个具体的工厂类。</p>

<!--more-->


<p><strong>用户场景</strong></p>

<p>还是继续“<a href="">工厂模式</a>”关于坦克生产的话题。话说我们准备修改代码，不再搞单独的坦克工厂、军舰厂和其它厂了，取而代之的是统一的兵工厂。也就是说俄国的兵工厂生产苏联的武器，美国的兵工厂生产美国的武器。反面例子就不举了，要问的还是两个老问题：1、新增加一个国家的兵工厂怎么处理？2、如果代码已二进制发布，别人如何方便的进行扩展？</p>

<p>解决方案和工厂方法很像，只不过现在的工厂提供了一组方法。先定义一个兵工厂接口，声明一系列方法告诉别人我要生产那些装备，剩下的就是各个具体兵工厂继承并实现这些方法。如果我们套定义的话，就是为一系列武器的创建提供了统一的接口，在需要的时候我们选择某个具体的兵工厂实现来完成任务。例子代码如下。</p>

<p>``` cpp main.cpp</p>

<h1>include <iostream></h1>

<p>using namespace std;</p>

<p>class Weapon {};</p>

<p>class Tank : public Weapon {};
class USTank : public Tank {};
class RussiaTank : public Tank {};</p>

<p>class Warship : public Weapon {};
class USWarship : public Warship {};
class RussiaWarship : public Warship {};</p>

<p>// 兵工厂
class Armory {
  public:</p>

<pre><code>virtual Tank* generateTank() = 0;
virtual Warship* generateWarship() = 0;
</code></pre>

<p>};</p>

<p>// 美国兵工厂
class USArmory : public Armory {
  public:</p>

<pre><code>virtual Tank* generateTank() {
  cout &lt;&lt; "US generates a Tank." &lt;&lt; endl;
  return new USTank;
}

virtual Warship* generateWarship() {
  cout &lt;&lt; "US generate a Warship." &lt;&lt; endl;
  return new USWarship;
}
</code></pre>

<p>};</p>

<p>// 俄国兵工厂
class RussiaArmory : public Armory {
  public:</p>

<pre><code>virtual Tank* generateTank() {
  cout &lt;&lt; "Russia generates a Tank." &lt;&lt; endl;
  return new RussiaTank;
}

virtual Warship* generateWarship() {
  cout &lt;&lt; "Russia generate a Warship." &lt;&lt; endl;
  return new RussiaWarship;
}
</code></pre>

<p>};</p>

<p>int main(void) {
  Armory <em>pUSArmory = new USArmory;
  Armory </em>pRussiaArmory = new RussiaArmory;</p>

<p>  Tank <em>pUSTank = pUSArmory->generateTank();
  Warship </em>pUSWarship = pUSArmory->generateWarship();</p>

<p>  Tank <em>pRussiaTank = pRussiaArmory->generateTank();
  Warship </em>pRussiaWarship = pRussiaArmory->generateWarship();</p>

<p>  delete pRussiaWarship;
  delete pRussiaTank;
  delete pUSWarship;
  delete pUSTank;
  delete pRussiaArmory;
  delete pUSArmory;
}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式 创建型：工厂方法]]></title>
    <link href="http://yingl.github.io/blog/2014/03/31/dp-creational-factory-method/"/>
    <updated>2014-03-31T22:00:59+08:00</updated>
    <id>http://yingl.github.io/blog/2014/03/31/dp-creational-factory-method</id>
    <content type="html"><![CDATA[<p>上周日给振华港机做了一个关于设计模式的培训，同学们反响还不错。我把相关材料整理了一下，将以连载的形式发布在这里与大家一起分享。从我个人的角度并不推荐四人帮的那本经典著作，太理论，太学术。对于大多数人来说，结合实际场景简单快速上手才是王道。淘宝黎叔就说过：技术是要落地的，不然就成了学术。即使是一个好东西，学习成本太高的话，对企业来说性价比就不高了。我们做培训也是，半天就结合实例把3类23种设计模式讲明白。如果看书的话，我推荐《<a href="http://book.douban.com/subject/2334288/">大话设计模式</a>》。</p>

<h3>工厂方法 Factory Method</h3>

<p><strong>定义</strong></p>

<p><a href="http://zh.wikipedia.org/wiki/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">Wiki链接</a>。定义一个接口用于创建对象，但是让子类决定初始化哪个类。工厂方法把一个类的初始化下放到子类。</p>

<!--more-->


<p><strong>用户场景</strong></p>

<p>以游戏红色警报为例，俄国美国都会生产坦克，如果我们需要一个生产坦克的函数负责所有坦克的生产，那么我们该怎么实现？很多同学第一反应是这样的：</p>

<p>``` cpp 代码片段
Tank* generateTank(int tankType) {
  if (RUSSIA == tankType) {</p>

<pre><code>return new RussiaTank;
</code></pre>

<p>  }
  else if (US == tankType) {</p>

<pre><code>return new USTank;
</code></pre>

<p>  }
  else {</p>

<pre><code>// ...
</code></pre>

<p>  }
}
```</p>

<p>看着也能正确运行。但是问题来了，如果我们想生产法国坦克怎么办？如果我们把代码以二进制库的形式打包在市场上卖给其它公司，别人想生产其它坦克怎么办？如果是我们自己的话还好办，改generateTank函数就可以了，可是买了我们引擎的其它公司怎么办？</p>

<p>先回忆一下面向对象的一条重要原则；开放－封闭。对修改封闭，对扩展开放。如果我们想生产新的坦克，应该采用扩展而不是修改的方式。工厂方法模式开始上场了，理论不多说，直接例子分析来解决现在的问题。首先我们需要一个工厂接口TankFactory，提供一个generate方法。然后继承这个接口，分别定义USTankFactory和RussiaTankFactory，各自实现generate方法生产不同的坦克。generateTank方法的参数由tankType改为TankFactory*，那么我们上层的代码在掌握了各种坦克工厂的信息后，只要把对应坦克工厂作为参数传下来就可以了。在工程实践里面一个最基本的要求就是下层代码改得越少越好。现在附上新的代码以供参考。</p>

<p>``` cpp main.cpp</p>

<h1>include <iostream></h1>

<p>using namespace std;</p>

<p>class Tank {};
class USTank : public Tank {};
class RussiaTank : public Tank {};</p>

<p>class TankFactory {
  public:</p>

<pre><code>virtual Tank* generate() = 0;
</code></pre>

<p>};</p>

<p>class USTankFactory : public TankFactory {
  public:</p>

<pre><code>virtual Tank* generate() { 
  cout &lt;&lt; "US generates a Tank." &lt;&lt; endl;
  return new USTank; }
</code></pre>

<p>};</p>

<p>class RussiaTankFactory : public TankFactory {
  public:</p>

<pre><code>virtual Tank* generate() { 
  cout &lt;&lt; "Russia generates a Tank." &lt;&lt; endl;
  return new RussiaTank;
}
</code></pre>

<p>};</p>

<p>Tank<em> generateTank(TankFactory </em>pTankFactory) {
  return pTankFactory->generate();
}</p>

<p>int main(void) {
  TankFactory <em>pUSTankFactory = new USTankFactory;
  TankFactory </em>pRussiaTankFactory = new RussiaTankFactory;</p>

<p>  Tank <em>pUSTank = generateTank(pUSTankFactory);
  Tank </em>pRussiaTank = generateTank(pRussiaTankFactory);</p>

<p>  delete pRussiaTank;
  delete pUSTank;
  delete pRussiaTankFactory;
  delete pUSTankFactory;
}
```</p>
]]></content>
  </entry>
  
</feed>

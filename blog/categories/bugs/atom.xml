<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bugs | 怪兽说]]></title>
  <link href="http://blog.monstersay.cn/blog/categories/bugs/atom.xml" rel="self"/>
  <link href="http://blog.monstersay.cn/"/>
  <updated>2015-02-15T16:29:40+08:00</updated>
  <id>http://blog.monstersay.cn/</id>
  <author>
    <name><![CDATA[窥基／无柳无酒／黑灯瞎火]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bugs: 优化要小心]]></title>
    <link href="http://blog.monstersay.cn/blog/2015/01/22/bug-optimization/"/>
    <updated>2015-01-22T10:33:35+08:00</updated>
    <id>http://blog.monstersay.cn/blog/2015/01/22/bug-optimization</id>
    <content type="html"><![CDATA[<p>最近某个移动客户端发布新版本后有新用户反映安装后经常出现随机接口请求错误，经过日志排查是某些请求过于频繁导致后台暂时屏蔽。但是为什么会导致如此频繁的请求呢？记得开发同学们信誓旦旦的拍着胸脯说这块代码逻辑没改过啊～～～还是老规矩代码说话，把当前版本的git提交日志拉出来，好吧，相关代码有个优化&hellip;呃，真的只是优化吗？让我们先来看一下优化后的伪代码。</p>

<!--more-->


<p>```java
void init() {
  dataAdapter = new DataAdapter();
}</p>

<p>void onMessageReceived(Result result) {
  if ((result != null) &amp;&amp; (result.getCount() == 0)) {</p>

<pre><code>receiveMessage();
</code></pre>

<p>  }
  // &hellip;
}
```
仔细分析一下代码问题就来了，对于老的已经有消息的用户，这段代码没有问题，但是对于新安装用户，服务端一条消息没有，那么问题就来了。当传入的result的count为0，调用receiveMessage向服务端请求，返回的result的count还是为0，结果就陷入了死循环，你丫好歹加个重试次数限制呢。再来看一下所谓优化前的代码。</p>

<p>```java
void onMessageReceived(Result result) {
  if (dataAdapter == null) {</p>

<pre><code>dataAdapter = new DataAdapter();
if ((result != null) &amp;&amp; (result.getCount() == 0)) {
  receiveMessage();
}
</code></pre>

<p>  }
  // &hellip;
}
```</p>

<p>在原来的代码里，仅当dataAdapter没有初始化的时候，也就是系统第一次初始化的时候，会尝试重新向服务器请求一次信息，查看receiveMessage代码可以发现，第一次请求是读取本地缓存，可能会因为各种原因返回的count是0。初始化完成之后如果再取到count为0的情况，有可能是网络不好，用户手动刷新一下就好了，不影响正常使用。</p>

<p>事后沟通因为开发认为dataAdaper的初始化应该放到init中会比较清晰，结果没有正确解读原有代码的逻辑。所以没事不要随便优化，做优化之前一定要先写好单元测试，不然改完之后，哼哼！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bugs: 控制逻辑要小心]]></title>
    <link href="http://blog.monstersay.cn/blog/2014/09/24/bug-control-flow/"/>
    <updated>2014-09-24T09:40:02+08:00</updated>
    <id>http://blog.monstersay.cn/blog/2014/09/24/bug-control-flow</id>
    <content type="html"><![CDATA[<p>最近在给某项目写单元测试，话说这单元测试应该开发来写，但是项目紧张人手不足也就没这么多讲究了。遇到一个函数，看着逻辑很简单，不可能出错，但是一测就发现了问题。问题函数代码简化后如下：</p>

<!--more-->


<p>```java
public Info getInfoById(Long id) {
  Info result = null;
  if ((id != null) &amp;&amp; (id > 0)) {</p>

<pre><code>// 是否被初始化
if (!INIT) {
  // 初始化程序是否正在运行
  if (!RUNNING) {
    init();
  }
  else {
    // 直接查询数据库
    try {
      result = infoDAO.getById(id);
    } catch (Exception e) {
      Logger.error("...");
    }
  }
  return infoDOMap.get(id);
}
</code></pre>

<p>  }
  return result;
}
```</p>

<p>原理看着很简单，如果已经初始化，就直接从缓存map里查找并返回数据，否则检查是否有其它线程在运行init程序，没有的话先init初始化缓存然后从map里查找并返回数据并返回数据。可是单元测试一跑，问题立马暴露，当我直接查询数据库获得结果或者异常抛出后没有直接返回，而是去返回缓存里的结果。这会导致一个问题，当某个线程在初始化的时候，另一个线程去访问了一个没有完全初始化的缓存。要问这个bug怎么发现的？在单元测试里使用mock很容易模拟初始化的各种状态遍历各种控制路径。开发自己测试的时候只走了一条标准路径自然没有发现问题。修改后的代码如下：</p>

<p>```java
public Info getInfoById(Long id) {
  if ((id != null) &amp;&amp; (id > 0)) {</p>

<pre><code>// 是否被初始化
if (!INIT) {
  // 初始化程序是否正在运行
  if (!RUNNING) {
    init();
  }
  else {
    // 直接查询数据库
    try {
      return infoDAO.getById(id);
    } catch (DAOException e) {
      Logger.error("...");
      return null;
    }
  }
}
</code></pre>

<p>  }
  return infoDOMap.get(id);
}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bugs: 小缓存大问题]]></title>
    <link href="http://blog.monstersay.cn/blog/2014/08/12/bug-cache/"/>
    <updated>2014-08-12T20:40:05+08:00</updated>
    <id>http://blog.monstersay.cn/blog/2014/08/12/bug-cache</id>
    <content type="html"><![CDATA[<p>具体业务细节不方便公开，但是这个问题警告我们在使用缓存的时候必须非常重视一致性问题。</p>

<p>首先来研究一下我们的缓存设计，我们选择了双机房双集群模式。也就是理论上说，每个机房都有一个独立的缓存集群，每次根据响应速度随机挑选一个比较快的集群访问，如果读取到数据，那么直接返回，如果没有读取到，那么从检查数据库并更新缓存记录。如果数据库里没有记录，那么先调用一个失效操作，然后写入缓存。整个系统看着没什么问题，但是天有不测风云～～～</p>

<!--more-->


<p>现在看看我们的系统问题出在哪里，大胆假设，小心求证后，我发现我们的数据只写了缓存，并没有写到数据库记录。现在来还原案发现场：</p>

<ul>
<li>[1] 集群A和B都没有记录。</li>
<li>[2] 集群A选中，没有记录，写入记录。</li>
<li>[3] 集群A选中，读取记录成功。</li>
<li>[4] 集群A选中，&hellip;&hellip;</li>
<li>[5] 集群B选中，写入A中的记录读取不到（因为2个集群是相互独立的，而且我们只写缓存，所以没有从数据库读取更新缓存这一步），写入之前调用了一次失效操作，导致集群A的记录也失效，这时B集群记录写入。</li>
<li>[6] 集群B选中，读取记录成功。</li>
<li>[7] 集群B选中，&hellip;&hellip;</li>
<li>[8] 集群A选中，第5步的情况又出现了。</li>
</ul>


<p>每次状况5和8出现的时候，因为该读的缓存记录我们没有读取到，所以做了一个特定的操作。然后因为我们应用的访问量特别大，这个操作出现的次数也忒多了些，然后就悲剧了。</p>

<p>最后怎么解决的？代码一行没改，缓存配置为双机房单集群，只要记录写入了缓存就不存在两个机房不一致的问题。所以使用缓存，特别是分布式缓存，有没有持久化记录对于保证记录一致性的影响还是很重要的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bugs: 价格转换粗大事了]]></title>
    <link href="http://blog.monstersay.cn/blog/2014/05/20/bug-price-convert/"/>
    <updated>2014-05-20T15:12:48+08:00</updated>
    <id>http://blog.monstersay.cn/blog/2014/05/20/bug-price-convert</id>
    <content type="html"><![CDATA[<p>今天中午刚吃完饭正在一狼假寐，突然电话铃响起！什么？居然有价格为0的商品？立刻从睡梦中惊醒开始排查。啥都不说了，先把肇事代码拿出来：</p>

<!--more-->


<p>```javascript
function getPriceStr(priceLong) {
  if (isNaN(priceLong)) {</p>

<pre><code>return '';
</code></pre>

<p>  }
  return (Math.round(priceLong / 100)).toFixed(2);
}
```</p>

<p>很明显，问题出在round上，丫返回的是整数啊！后台返回的价格单位是分，前台转化成元，想法没错，但是但是&hellip;好吧，测试也有很大责任，只看页面展现，把这个细节漏掉了。从这个例子可以看出，单元测试非常非常重要，如果有单元测试的话，开发阶段就可以把这个问题修复了。还好这次没撞上大活动，在灰度阶段被兄弟部门发现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bugs: 小心Macro]]></title>
    <link href="http://blog.monstersay.cn/blog/2014/04/16/bug-macro/"/>
    <updated>2014-04-16T20:24:59+08:00</updated>
    <id>http://blog.monstersay.cn/blog/2014/04/16/bug-macro</id>
    <content type="html"><![CDATA[<p>以前在微软做数据库连接组件测试时曾遇到这么一个问题，为了提高测试的真实性，所有测试用例在编译时取消了_DEBUG/DEBUG的定义，结果在执行测试用例的时候出现一个从未见过的错误，经调试发现if/else工作不正常，在if已经判断为false之后还是继续执行，没有跳转。经过对代码反复排查，最终发现是宏的不恰当使用导致了这个问题。</p>

<!--more-->


<p>先看以下这段简化过的代码：</p>

<p>```cpp</p>

<h1>ifdef _DEBUG</h1>

<p>  #define TRACE printf</p>

<h1>else</h1>

<p>  #define TRACE if(0) printf</p>

<h1>endif</h1>

<p>```</p>

<p>这段代码初看没什么问题，如果_DEBUG打开TRACE就执行printf，否则TRACE就是一个空操作。但是情况真的跟想当然一样吗？请看以下代码：</p>

<p>```cpp</p>

<h1>include &lt;stdio.h></h1>

<h1>define _DEBUG</h1>

<h1>ifdef _DEBUG</h1>

<p>  #define TRACE printf</p>

<h1>else</h1>

<p>  #define TRACE if(0) printf</p>

<h1>endif</h1>

<p>int main(void) {
  if (1)</p>

<pre><code>TRACE("OK!\n");
</code></pre>

<p>  else</p>

<pre><code>printf("Why?\n");
</code></pre>

<p>}
```</p>

<p>分别打开关闭<em>DEBUG编译执行看看结果是什么？会不会觉得比较奇怪？如果我把#define </em>DEBUG注释掉，理论上应该什么都不打印。其实这个问题我们只要把宏展开就可以发现，代码其实是这样的：</p>

<p>```cpp
if (1)
  if (0)</p>

<pre><code>printf("OK!\n");
</code></pre>

<p>  else</p>

<pre><code>printf("Why?\n");
</code></pre>

<p>```</p>

<p>修复这个问题的方法有两个：</p>

<ul>
<li>在所有调用TRACE的地方用{}包起来，这个改动量太大了，最后没有采用。</li>
<li>用while取代if，这样展开就没有问题了。而且只要修改一个公共的头文件就可以了。</li>
</ul>


<p>最终代码如下：</p>

<p>```cpp</p>

<h1>ifdef _DEBUG</h1>

<p>  #define TRACE printf</p>

<h1>else</h1>

<p>  #define TRACE while(0) printf</p>

<h1>endif</h1>

<p>```</p>

<p>上面例子的代码展开就可以按照期望运行了。</p>

<p>```cpp
if (1)
  while (0)</p>

<pre><code>printf("OK!\n");
</code></pre>

<p>else
  printf(&ldquo;Why?\n&rdquo;);
```</p>
]]></content>
  </entry>
  
</feed>

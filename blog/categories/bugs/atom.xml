<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bugs | 怪兽说]]></title>
  <link href="http://yingl.github.io/blog/categories/bugs/atom.xml" rel="self"/>
  <link href="http://yingl.github.io/"/>
  <updated>2014-05-04T13:22:37+08:00</updated>
  <id>http://yingl.github.io/</id>
  <author>
    <name><![CDATA[窥基／无柳无酒／黑灯瞎火]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bugs: 小心Macro]]></title>
    <link href="http://yingl.github.io/blog/2014/04/16/bug-macro/"/>
    <updated>2014-04-16T20:24:59+08:00</updated>
    <id>http://yingl.github.io/blog/2014/04/16/bug-macro</id>
    <content type="html"><![CDATA[<p>以前在微软做数据库连接组件测试时曾遇到这么一个问题，为了提高测试的真实性，所有测试用例在编译时取消了_DEBUG/DEBUG的定义，结果在执行测试用例的时候出现一个从未见过的错误，经调试发现if/else工作不正常，在if已经判断为false之后还是继续执行，没有跳转。经过对代码反复排查，最终发现是宏的不恰当使用导致了这个问题。</p>

<!--more-->


<p>先看以下这段简化过的代码：</p>

<p>``` cpp xxx.h</p>

<h1>ifdef _DEBUG</h1>

<p>  #define TRACE printf</p>

<h1>else</h1>

<p>  #define TRACE if(0) printf</p>

<h1>endif</h1>

<p>```</p>

<p>这段代码初看没什么问题，如果_DEBUG打开TRACE就执行printf，否则TRACE就是一个空操作。但是情况真的跟想当然一样吗？请看以下代码：</p>

<p>``` cpp test.cpp</p>

<h1>include &lt;stdio.h></h1>

<h1>define _DEBUG</h1>

<h1>ifdef _DEBUG</h1>

<p>  #define TRACE printf</p>

<h1>else</h1>

<p>  #define TRACE if(0) printf</p>

<h1>endif</h1>

<p>int main(void) {
  if (1)</p>

<pre><code>TRACE("OK!\n");
</code></pre>

<p>  else</p>

<pre><code>printf("Why?\n");
</code></pre>

<p>}
```</p>

<p>分别打开关闭<em>DEBUG编译执行看看结果是什么？会不会觉得比较奇怪？如果我把#define </em>DEBUG注释掉，理论上应该什么都不打印。其实这个问题我们只要把宏展开就可以发现，代码其实是这样的：</p>

<p>``` cpp xxx.cpp
if (1)
  if (0)</p>

<pre><code>printf("OK!\n");
</code></pre>

<p>  else</p>

<pre><code>printf("Why?\n");
</code></pre>

<p>```</p>

<p>修复这个问题的方法有两个：</p>

<ol>
<li>在所有调用TRACE的地方用{}包起来，这个改动量太大了，最后没有采用。</li>
<li>用while取代if，这样展开就没有问题了。而且只要修改一个公共的头文件就可以了。</li>
</ol>


<p>最终代码如下：</p>

<p>``` cpp xxx.h</p>

<h1>ifdef _DEBUG</h1>

<p>  #define TRACE printf</p>

<h1>else</h1>

<p>  #define TRACE while(0) printf</p>

<h1>endif</h1>

<p>```</p>

<p>上面例子的代码展开就可以按照期望运行了。</p>

<p>``` cpp xxx.cpp
if (1)
  while (0)</p>

<pre><code>printf("OK!\n");
</code></pre>

<p>else
  printf(&ldquo;Why?\n&rdquo;);
```</p>
]]></content>
  </entry>
  
</feed>
